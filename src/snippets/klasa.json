{
    "Create new Klasa command": {
        "body": [
            "const { Command } = require('klasa');",
            "",
            "module.exports = class extends Command {",
            "",
            "    constructor(...args) {",
            "        super(...args, {",
            "            enabled: ${1|true,false|},",
            "            runIn: ['text', 'dm', 'group'],",
            "            cooldown: ${2:0},",
            "            aliases: [$3],",
            "            permLevel: ${4|0,1,2,3,4,5,6,7,8,9,10|},",
            "            botPerms: [],",
            "            requiredSettings: [],",
            "            description: '$5',",
            "            usage: '$6',",
            "            usageDelim: ${7:undefined},",
            "            extendedHelp: '${8:No extended help available.}'",
            "        });",
            "    }",
            "",
            "    async run(msg, [...params]) {",
            "        // This is where you place the code you want to run for your command",
            "        $0",
            "    }",
            "",
            "    async init() {",
            "        // You can optionally define this method which will be run when the bot starts (after login, so discord data is available via this.client)",
            "    }",
            "",
            "};",
            ""
        ],
        "prefix": "klasaCommand",
        "description": "Create new Klasa command"
    },
    "Create new Klasa event": {
        "body": [
            "const { Event } = require('klasa');",
            "",
            "module.exports = class extends Event {",
            "",
            "    constructor(...args) {",
            "        super(...args, { ",
            "            enabled: ${1|true,false|}",
            "        });",
            "    }",
            "",
            "    run(...params) {",
            "        // This is where you place the code you want to run for your event",
            "        $0",
            "    }",
            "",
            "    async init() {",
            "        // You can optionally define this method which will be run when the bot starts (after login, so discord data is available via this.client)",
            "    }",
            "",
            "};",
            ""
        ],
        "prefix": "klasaEvent",
        "description": "Create new Klasa event"
    },
    "Create new Klasa extendable": {
        "body": [
            "const { Extendable } = require('klasa');",
            "",
            "module.exports = class extends Extendable {",
            "",
            "    constructor(...args) {",
            "        super(...args, ['Message'], {",
            "            enabled: ${1|true,false|},",
            "            klasa: ${2|false,true|}",
            "        });",
            "    }",
            "",
            "    ${3|,get ,set |}extend() {",
            "        // `this` reffers to the parent class, and not this one. You cannot use super",
            "        $0",
            "    }",
            "",
            "};",
            ""
        ],
        "prefix": "klasaExtendable",
        "description": "Create new Klasa extendable"
    },
    "Create new Klasa finalizer": {
        "body": [
            "const { Finalizer } = require('klasa');",
            "",
            "module.exports = class extends Finalizer {",
            "",
            "    constructor(...args) {",
            "        super(...args, {",
            "            enabled: ${1|true,false|}",
            "        });",
            "    }",
            "",
            "    run(msg, mes, start) {",
            "        // This is where you place the code you want to run for your finalizer",
            "        $0",
            "    }",
            "",
            "    async init() {",
            "        // You can optionally define this method which will be run when the bot starts (after login, so discord data is available via this.client)",
            "    }",
            "",
            "};",
            ""
        ],
        "prefix": "klasaFinalizer",
        "description": "Create new Klasa finalizer"
    },
    "Create new Klasa inhibitor": {
        "body": [
            "const { Inhibitor } = require('klasa');",
            "",
            "module.exports = class extends Inhibitor {",
            "",
            "    constructor(...args) {",
            "        super(...args, {",
            "            enabled: ${1|true,false|},",
            "            spamProtection: ${2|false,true|}",
            "        });",
            "    }",
            "",
            "    async run(msg, cmd) {",
            "        // This is where you place the code you want to run for your inhibitor",
            "        $0",
            "    }",
            "",
            "    async init() {",
            "        // You can optionally define this method which will be run when the bot starts (after login, so discord data is available via this.client)",
            "    }",
            "",
            "};",
            ""
        ],
        "prefix": "klasaInhibitor",
        "description": "Create new Klasa inhibitor"
    },
    "Create new Klasa language": {
        "body": [
            "const { Language } = require('klasa');",
            "",
            "module.exports = class extends Language {",
            "",
            "    constructor(...args) {",
            "        super(...args, {",
            "            enabled: ${1|true,false|}",
            "        });",
            "",
            "        this.language = {",
            "            DEFAULT: (key) => `\\${key} has not been localized for ${1:${TM_FILENAME_BASE:yourLanguageName}} yet.`,",
            "            DEFAULT_LANGUAGE: 'Default Language',",
            "            SETTING_GATEWAY_EXPECTS_GUILD: 'The parameter <Guild> expects either a Guild or a Guild Object.',",
            "            // ...",
            "            COMMAND_CONF_RESET: (key, response) => `The key **\\${key}** has been reset to: \\`\\${response}\\``",
            "        }",
            "        // please note, that as the Language is loaded before the client is loaded, using this.client in a literal sense may throw errors such as: this.client.user.username would throw \"can't get property username of null\"",
            "    }",
            "",
            "    async init() {",
            "        // You can optionally define this method which will be run when the bot starts (after login, so discord data is available via this.client)",
            "    }",
            "",
            "};",
            ""
        ],
        "prefix": "klasaLanguage",
        "description": "Create new Klasa language"
    },
    "Create new Klasa monitor": {
        "body": [
            "const { Monitor } = require('klasa');",
            "",
            "module.exports = class extends Monitor {",
            "",
            "    constructor(...args) {",
            "        super(...args, {",
            "            enabled: ${1|true,false|},",
            "            ignoreBots: ${2|true,false|},",
            "            ignoreSelf: ${3|true,false|}",
	    "		 ignoreOthers: ${4|true, false|} // 0.4.0-dev only"
            "        });",
            "    }",
            "",
            "    run(msg) {",
            "        // This is where you place the code you want to run for your monitor",
            "        $0",
            "    }",
            "",
            "    async init() {",
            "        // You can optionally define this method which will be run when the bot starts (after login, so discord data is available via this.client)",
            "    }",
            "",
            "};",
            ""
        ],
        "prefix": "klasaMonitor",
        "description": "Create new Klasa monitor"
	},
	"Create new Klasa provider": {
        "body": [
            "const { Provider } = require('klasa');",
            "",
            "module.exports = class extends Provider {",
            "",
            "    constructor(...args) {",
            "        super(...args, {",
            "            enabled: ${1|true,false|},",
            "            sql: ${2|true,false|},",
            "            description: '$3'",
            "        });",
            "    }",
            "",
            "    init() {",
            "        // You can optionally define this method which will be run when the bot starts (after login, so discord data is available via this.client).",
            "    }",
            "",
            "    shutdown() {",
            "        // You can optionally define this method which will be run when the provider is removed from the ProviderStore.",
            "    }",
            "",
            "    hasTable(table) {",
            "        // Checks if a table exists.",
            "    }",
            "",
            "    createTable(table) {",
            "        // Create a new table.",
            "    }",
            "",
            "    deleteTable(table) {",
            "        // Delete a table.",
            "    }",
            "",
            "    getAll(table) {",
            "        // Get all records from a table.",
            "    }",
            "",
            "    get(table, id) {",
            "        // Get a record from a table.",
            "    }",
            "",
            "    has(table, id) {",
            "        // Check if the record exists.",
            "    }",
            "",
            "    getRandom(table) {",
            "        // Get a random record from a table.",
            "    }",
            "",
            "    create(table, id, data) {",
            "        // Insert a new record.",
            "    }",
            "",
            "    set(...args) {",
            "        return this.create(...args);",
            "    }",
            "",
            "    insert(...args) {",
            "        return this.create(...args);",
            "    }",
            "",
            "    update(table, id, data) {",
            "        // Update a record.",
            "    }",
            "",
            "    replace(table, id, data) {",
            "        // Replace all the data from a record",
            "    }",
            "",
            "    delete(table, id) {",
            "        // Delete a record from the database",
            "    }",
            "",
            "};",
            ""
        ],
        "prefix": "klasaProvider",
        "description": "Create new Klasa Provider"
    },
    "Create new Klasa entry file": {
        "body": [
            "const { Client } = require('klasa');",
            "",
            "new Client({",
            "    clientOptions: {",
            "        apiRequestMethod: '${1|sequential,burst|}',",
            "        fetchAllMembers: ${2|false,true|}",
            "    },",
            "    prefix: '${3:+}',",
            "    cmdEditing: ${4|true,false|},",
            "    cmdPrompt: ${5|false,true|},",
            "    cmdLogging: ${6|true,false|},",
            "    typing: ${7|true,false|},",
            "    quotedStringSupport: ${8|false,true|},",
            "    readyMessage: (client) => `${client.user.tag}, Ready to serve ${client.guilds.size} guilds and ${client.users.size} users`",
            "}).login('${9:your-bot-token}');",
            ""
        ],
        "prefix": "klasaIndex",
        "description": "Create new Klasa entry file"
    }
}
